package <%=PackageName%>

import (
	"context"
	"github.com/golang/protobuf/proto"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"
	"servers/protocol"
	"wrappers/common"
	"wrappers/db_wrapper"
)

func MsgProc<%=ModelName%>Delete(srcAddr string, msgId uint16, userId string, message proto.Message) bool {
	zLog := common.ZLog
	msg := message.(*protocol.ModelDeleteDB)
	collection := db_wrapper.MongoClient.Database(DBName).Collection("<%=ModelName%>")

	ctx := context.Background()

	for {
		Id, err := primitive.ObjectIDFromHex(msg.Id)
		if err != nil {
			zLog.Error("MsgProc<%=ModelName%>Delete primitive.ObjectIDFromHex error", zap.String("msg.Id", msg.Id), zap.Error(err))
			break
		}
		filter := bson.M{"_id": Id}
		deleteResult, err := collection.DeleteOne(ctx, filter)
		if err != nil {
			zLog.Error("MsgProc<%=ModelName%>Delete collection.DeleteOne error", zap.Error(err))
			break
		}

		msg.DeletedCount = deleteResult.DeletedCount

		break
	}

	SendMsgBack(srcAddr, msgId, userId, msg)

	return true
}
